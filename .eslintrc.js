module.exports = {
  root: true,
  env: {
    browser: true,
    'jest/globals': true,
    node: true,
  },
  parserOptions: {
    parser: '@babel/eslint-parser',
    requireConfigFile: false,
  },
  extends: ['@nuxtjs', 'plugin:nuxt/recommended', 'prettier'],
  plugins: ['jest'],
  // 在此处添加自定义规则
  rules: {
    // 此规则关注Vue文件中每行属性的数量。‌‌确保Vue模板中的属性分配清晰，‌避免单行属性过多导致代码难以阅读。‌
    'vue/max-attributes-per-line': [2, { singleline: 20, multiline: 1 }],

    // 合理配置与使用 ESLint 和 Prettier，‌可有效提升代码质量与团队开发效率
    'prettier/prettier': 0,

    // 关闭自闭合标签
    'vue/html-self-closing': 0,

    // 这个规则要求在单行的HTML元素内部书写代码时，如果元素不是自闭合标签，那么开始标签和结束标签之间的内容必须要换行。如果不遵守这个规则，ESLint会报错。
    'vue/singleline-html-element-content-newline': 0,

    // 这个规则要求在Vue组件中，当HTML元素的内容跨越多行时，这些内容应当由换行符分隔。如果你在模板中的某个元素内部有多行内容，但这些内容没有以换行符开始或结束，那么ESLint就会报错。
    'vue/multiline-html-element-content-newline': 0,

    // vue组件name强制使用驼峰命名
    'vue/name-property-casing': 0,

    // 禁止在Vue模板中使用v-html指令，‌以避免潜在的XSS攻击。‌
    'vue/no-v-html': 0,

    // 确保对象访问器方法成对出现
    'accessor-pairs': 2,

    // 确保箭头函数周围的空格使用一致
    'arrow-spacing': [2, { before: true, after: true }],

    // 确保代码块间距风格一致，‌提升代码可读性
    'block-spacing': [2, 'always'],

    // 确保在块级作用域内使用一致的缩进
    'brace-style': [2, '1tbs', { allowSingleLine: true }],

    // 确保变量、‌函数等命名符合驼峰命名法，‌提升代码可读性。‌
    camelcase: [0, { properties: 'always' }],

    // ‌去除最后的逗号
    'comma-dangle': 0,

    // 此规则关注逗号后的空格使用
    'comma-spacing': [2, { before: false, after: true }],

    // 逗号风格
    'comma-style': [2, 'last'],

    // 确保派生类构造函数正确调用super()
    'constructor-super': 2,

    // 要求或禁止花括号的使用
    curly: [2, 'multi-line'],

    // 确保在对象字面量中使用一致的冒号和逗号风格
    'key-spacing': [2, { beforeColon: false, afterColon: true }],

    // 确保在对象字面量中使用一致的引号风格
    'quote-props': 0,

    // 确保代码中点号（‌.）‌的使用位置一致，‌提高代码可读性。‌
    'dot-location': [2, 'property'],

    // 确保文件以换行符结束，‌增强跨平台兼容性。‌预防因缺少换行符导致的潜在问题。‌
    'eol-last': 2,

    // 要求使用严格相等运算符（‌=== 和 !==）‌，‌避免类型强制转换导致的错误。‌
    eqeqeq: ['error', 'always', { null: 'ignore' }],

    // -‌规则作用‌：‌规范生成器函数*的位置。‌
    // -‌配置选项‌：‌
    // -‌before‌：‌*号前是否允许有空格，‌可选true或false。‌
    // -‌after‌：‌*号后是否允许有空格，‌可选true或false。‌
    // -‌named‌：‌命名生成器函数中*的空格规则，‌配置同上。‌
    // -‌anonymous‌：‌匿名生成器函数中*的空格规则，‌配置同上。‌
    'generator-star-spacing': [2, { before: true, after: true }],

    // -‌规则目的‌：‌规范回调函数中错误的处理方式。‌
    // -‌核心要求‌：‌
    // 确保回调函数中的错误被妥善处理。‌
    // 避免忽略或误用错误处理逻辑。‌
    'handle-callback-err': [2, '^(err|error)$'],

    // -作用‌：‌规范代码缩进，‌增强可读性。‌
    // -‌配置方式‌：‌
    // -‌规则设置‌：‌在ESLint配置文件中设置indent规则。‌
    // -可指定缩进类型（‌如空格或制表符）‌。‌
    // -可设置缩进宽度。‌
    indent: [2, 2, { SwitchCase: 1 }],

    // -‌规则作用‌：‌确保JSX属性使用一致引号。‌
    // -‌配置选项‌：‌
    // -‌"preferDouble"‌：‌偏好使用双引号。‌
    // -‌"preferSingle"‌：‌偏好使用单引号。‌
    // -‌"avoidEscape"‌：‌避免不必要的转义字符。‌
    'jsx-quotes': [2, 'prefer-double'],

    // -‌规则作用‌：‌规范对象字面量中键与值之间的间距。‌
    // -‌配置选项‌：‌
    // -‌beforeColon‌：‌冒号前的间距要求。‌
    // - 可设为true（‌要求有空格）‌、‌false（‌要求无空格）‌或具体的空格数。‌
    // -‌afterColon‌：‌冒号后的间距要求。‌
    // - 同上，‌可设为true、‌false或具体的空格数。‌
    // -‌mode‌：‌设置间距模式，‌可选strict（‌严格模式）‌或minimum（‌最小模式）‌。‌
    'key-spacing': [2, { beforeColon: false, afterColon: true }],

    // -‌规则作用‌：‌规范关键字前后的间距。‌
    // -‌配置选项‌：‌
    // -‌before‌：‌关键字前的间距要求。‌
    // - 可设为true（‌要求有空格）‌、‌false（‌要求无空格）‌或具体的空格数。‌
    // -‌after‌：‌关键字后的间距要求。‌
    // - 同上，‌可设为true、‌false或具体的空格数。‌
    // -‌overrides‌：‌为特定关键字设置间距规则。‌
    // - 可针对特定关键字进行个性化的间距配置。‌
    'keyword-spacing': [2, { before: true, after: true }],

    // -‌规则作用‌：‌要求构造函数调用时使用new关键字。‌
    // -‌配置选项‌：‌
    // -‌capIsNewExceptions‌：‌允许不使用new的关键字列表。‌
    // - 默认为空数组，‌可添加特定函数名，‌允许其不使用new调用。‌
    // -‌newIsCapExceptions‌：‌允许使用new的非构造函数列表。‌
    // - 默认为空数组，‌可添加特定函数名，‌允许其使用new调用，‌即使它们不是构造函数。‌
    // -‌newIsCap‌：‌是否要求构造函数调用时使用new。‌
    // - 默认为true，‌要求使用new。‌
    // -‌capIsNew‌：‌是否要求使用new的必须是构造函数。‌
    // - 默认为true，‌要求使用new的必须是构造函数。‌
    'new-cap': [2, { newIsCap: true, capIsNew: false }],

    // -‌规则作用‌：‌确保使用new操作符时带上圆括号。‌
    // -‌配置选项‌：‌
    // -‌无特定配置‌：‌默认要求使用new时带上圆括号。‌
    'new-parens': 2,

    // 此规则旨在避免使用Array构造函数来创建新数组，‌推荐使用数组字面量语法。‌
    'no-array-constructor': 2,

    // 禁用arguments.caller或arguments.callee
    'no-caller': 2,

    // 禁用console
    'no-console': 'off',

    // -‌规则含义‌：‌禁止修改类声明的变量。‌
    // -‌为何使用‌：‌
    // -‌保护类定义‌：‌防止类被意外重写或修改，‌保证类的稳定性和一致性。‌
    // -‌避免混淆‌：‌防止开发者误用类名作为变量名，‌导致代码逻辑混乱。‌
    'no-class-assign': 2,

    // 此规则旨‌禁止在条件表达式中使用赋值操作符‌。‌
    // -‌原因解析‌：‌
    // -‌避免逻辑错误‌：‌在条件表达式中进行赋值操作可能导致逻辑错误或难以追踪的问题。‌
    // -‌提高代码清晰度‌：‌禁止此类操作有助于保持代码的清晰和易于理解。‌
    'no-cond-assign': 2,

    //  此规则旨‌禁止修改const声明的变量‌。‌
    // -‌原因解析‌：‌
    // -‌遵守const语义‌：‌const声明的变量不应被重新赋值，‌遵循其语义。‌
    // -‌避免意外行为‌：‌修改const变量可能导致意外的行为或错误。‌
    'no-const-assign': 2,

    //     此规则旨‌禁止在正则表达式中使用控制字符‌。‌
    // -‌原因解析‌：‌
    // -‌避免潜在错误‌：‌控制字符在正则表达式中可能有特殊含义，‌使用不当可能导致匹配错误。‌
    // -‌提高可读性‌：‌避免使用控制字符可以使正则表达式更易于理解和维护。‌
    'no-control-regex': 0,

    // 此规则旨‌禁止删除变量‌。‌
    // -‌原因解析‌：‌
    // -‌避免运行时错误‌：‌删除变量可能导致程序在运行时出现错误或异常。‌
    // -‌保持代码清晰‌：‌避免删除变量有助于保持代码的清晰和易于理解。‌
    'no-delete-var': 2,

    // 此规则旨‌禁止函数参数重复‌。‌
    // -‌原因解析‌：‌
    // -‌避免混淆‌：‌重复的参数可能导致函数调用时的混淆和错误。‌
    // -‌提高代码质量‌：‌避免参数重复可以提高代码的可读性和可维护性。‌
    'no-dupe-args': 2,

    // 此规则旨‌禁止类成员重复‌。‌
    // -‌原因解析‌：‌
    // -‌避免混淆‌：‌重复的类成员可能导致使用时的混淆和错误。‌
    // -‌提高代码质量‌：‌避免成员重复可以提高代码的可读性和可维护性。‌
    'no-dupe-class-members': 2,

    // 此规则旨‌禁止对象字面量键重复‌。‌
    // -‌原因解析‌：‌
    // -‌避免覆盖‌：‌重复的键可能导致对象属性的覆盖，‌从而丢失数据。‌
    // -‌提高代码质量‌：‌避免键重复可以提高代码的可读性和可维护性。‌
    'no-dupe-keys': 2,

    // 此规则旨‌禁止switch语句中出现重复的case标签‌。‌
    // -‌原因解析‌：‌
    // -‌避免混淆‌：‌重复的case标签可能导致代码执行逻辑混乱。‌
    // -‌提高代码质量‌：‌避免case重复可以提高代码的可读性和可维护性。‌
    'no-duplicate-case': 2,

    // 此规则旨‌禁止正则表达式中的空字符类‌。‌
    // -‌规则意义‌：‌
    // -‌避免错误‌：‌空字符类可能表示正则表达式的编写错误。‌
    // -‌提高代码质量‌：‌遵循此规则可以提高代码的可读性和可维护性。‌
    'no-empty-character-class': 2,

    // 此规则旨‌禁止正则表达式中的空模式‌。‌
    // -‌规则意义‌：‌
    // -‌避免错误‌：‌空模式可能表示正则表达式的编写错误或遗漏。‌
    // -‌提高代码质量‌：‌遵循此规则可以提升代码的可读性和可维护性。‌
    'no-empty-pattern': 2,

    // 此规则旨‌禁止使用eval函数‌。‌
    // -‌原因解析‌：‌
    // -‌安全风险‌：‌eval函数执行字符串中的代码，‌可能导致代码注入攻击。‌
    // -‌性能问题‌：‌使用eval可能导致JavaScript引擎优化困难，‌影响性能。‌
    // -‌调试困难‌：‌eval中的代码难以调试和追踪。‌
    'no-eval': 2,

    // 此规则旨‌禁止对异常对象重新赋值‌。‌
    // -‌规则意义‌：‌
    // -‌保持异常完整性‌：‌避免修改异常对象，‌确保其原始信息的完整性。‌
    // -‌提高代码质量‌：‌遵循此规则有助于提升代码的可读性和可维护性。‌
    'no-ex-assign': 2,

    // 此规则旨‌禁止扩展原生对象‌。‌
    // -‌规则意义‌：‌
    // -‌避免污染全局‌：‌防止向原生对象添加属性或方法，‌导致全局污染。‌
    // -‌提高兼容性‌：‌避免扩展原生对象导致代码在不同环境下的兼容性问题。‌
    'no-extend-native': 2,

    // 此规则旨‌禁止不必要的.bind()调用‌。‌
    // -‌规则意义‌：‌
    // -‌性能优化‌：‌避免不必要的函数调用开销，‌提升性能。‌
    // -‌代码简洁‌：‌减少冗余代码，‌提高代码可读性。‌
    'no-extra-bind': 2,

    // 此规则旨‌禁止不必要的布尔转换‌。‌
    // -‌规则意义‌：‌
    // -‌提高代码可读性‌：‌避免使用冗余的布尔转换，‌使代码更加直观。‌
    // -‌简化代码逻辑‌：‌减少不必要的类型转换，‌使逻辑更加简洁。‌
    'no-extra-boolean-cast': 2,

    // 此规则旨‌禁止不必要的括号‌。‌
    // -‌规则意义‌：‌
    // -‌提高代码可读性‌：‌减少不必要的括号使用，‌使代码更加简洁明了。‌
    // -‌避免误解‌：‌防止因多余括号导致的代码逻辑误解或错误。‌
    'no-extra-parens': [2, 'functions'],

    // 此规则旨‌防止switch语句中的意外穿透‌。‌
    // -‌规则意义‌：‌
    // -‌提高代码可读性‌：‌明确每个case的结束，‌避免逻辑混淆。‌
    // -‌防止错误‌：‌防止因缺少break导致的逻辑错误。‌
    'no-fallthrough': 2,

    // 此规则旨‌禁止浮点小数点的使用‌。‌
    // -‌规则意义‌：‌
    // -‌提高代码一致性‌：‌确保数字表示方式统一，‌避免混淆。‌
    // -‌简化代码理解‌：‌去除浮点小数点，‌使数字更直观易懂。‌
    'no-floating-decimal': 2,

    // 此规则旨‌禁止在函数内部重新分配函数‌。‌
    // -‌规则意义‌：‌
    // -‌提高代码清晰度‌：‌防止函数在定义后被意外修改，‌导致逻辑混乱。‌
    // -‌避免潜在错误‌：‌防止因函数重新分配导致的预期之外的行为。‌
    'no-func-assign': 2,

    // 此规则旨‌禁止使用隐式eval()‌。‌
    // -‌规则意义‌：‌
    // -‌提高安全性‌：‌防止潜在的代码注入攻击。‌
    // -‌增强代码清晰度‌：‌避免使用可能导致代码难以理解的隐式eval()。‌
    'no-implied-eval': 2,

    // 此规则旨‌禁止在函数内部声明函数‌。‌
    // -‌规则意义‌：‌
    // -‌提高代码清晰度‌：‌避免函数内部声明导致逻辑混乱。‌
    // -‌遵循最佳实践‌：‌推荐将函数声明放在程序或作用域顶部。‌
    'no-inner-declarations': [2, 'functions'],

    // 此规则旨‌禁止使用无效的正则表达式‌。‌
    // -‌规则意义‌：‌
    // -‌提高代码质量‌：‌避免运行时错误，‌提升代码健壮性。‌
    // -‌增强可维护性‌：‌防止因正则表达式错误导致的难以调试的问题。‌
    'no-invalid-regexp': 2,

    // 此规则旨‌禁止使用不规则的空白字符‌。‌
    // -‌规则意义‌：‌
    // -‌提升代码一致性‌：‌确保代码中使用统一的空白字符，‌提高代码可读性。‌
    // -‌防止潜在错误‌：‌不规则的空白字符可能导致解析错误或逻辑问题。‌
    'no-irregular-whitespace': 2,

    // 此规则旨‌禁止使用迭代器‌。‌
    // -‌规则意义‌：‌
    // -‌提高代码性能‌：‌避免不必要的迭代器使用，‌减少性能开销。‌
    // -‌增强代码清晰度‌：‌推荐使用更简洁、‌直观的代码实现方式。‌
    'no-iterator': 2,

    // 此规则旨‌禁用标签变量‌，‌以提高代码质量和可读性。‌
    // -‌规则意义‌：‌
    // -‌避免混淆‌：‌标签变量可能导致代码逻辑不清晰，‌增加理解难度。‌
    // -‌提升代码质量‌：‌遵循此规则，‌有助于编写更清晰、‌易于维护的代码。‌
    'no-label-var': 2,

    // 此规则旨‌禁止使用标签语句‌。‌
    // -‌规则意义‌：‌
    // -‌提升代码清晰度‌：‌避免使用标签导致的代码逻辑混乱。‌
    // -‌促进代码维护‌：‌不使用标签，‌便于代码理解和后期维护。‌
    'no-labels': [2, { allowLoop: false, allowSwitch: false }],

    // 此规则旨‌禁用不必要的块级语句‌。‌
    // -‌规则意义‌：‌
    // -‌提升代码清晰度‌：‌避免单个语句占用独立代码块，‌提高代码可读性。‌
    // -‌促进代码规范‌：‌鼓励使用更简洁、‌紧凑的代码结构，‌符合编码规范。‌
    'no-lone-blocks': 2,

    // 此规则旨‌避免空格与制表符混用‌，‌以提升代码质量。‌
    // -‌规则意义‌：‌
    // -‌保持一致性‌：‌统一的缩进风格，‌提升代码可读性。‌
    // -‌减少错误‌：‌混用可能导致意外的格式问题，‌影响代码执行。‌
    'no-mixed-spaces-and-tabs': 2,

    // 此规则旨‌避免代码中多余的空格‌。‌
    // -‌规则意义‌：‌
    // -‌提升代码清晰度‌：‌减少不必要的空格，‌使代码更加整洁。‌
    // -‌促进代码规范‌：‌遵循统一的编码标准，‌便于团队协作。‌
    'no-multi-spaces': 2,

    // 此规则旨‌禁用多行字符串‌，‌保持代码整洁。‌
    // -‌规则意义‌：‌
    // -‌提升可读性‌：‌避免使用多行字符串，‌提高代码清晰度。‌
    // -‌促进规范‌：‌鼓励使用更简洁、‌紧凑的代码表达方式
    'no-multi-str': 2,

    // 此规则旨‌限制空行数‌，‌提升代码整洁度。‌
    // -‌规则意义‌：‌
    // -‌提升可读性‌：‌避免过多空行，‌使代码结构更加紧凑。‌
    // -‌统一风格‌：‌确保团队成员间代码风格一致，‌便于协作。‌
    'no-multiple-empty-lines': [2, { max: 1 }],

    // 此规则旨‌禁止重写原生对象‌，‌保持代码纯净。‌
    // -‌规则意义‌：‌
    // -‌维护原生功能‌：‌避免修改原生对象行为，‌确保代码行为一致性。‌
    // -‌预防错误‌：‌防止因修改原生对象导致的不可预测的错误。‌
    'no-native-reassign': 2,

    // 此规则旨‌禁止左侧否定比较‌，‌提升代码清晰度。‌
    // -‌规则意义‌：‌
    // -‌增强可读性‌：‌避免在比较操作符的左侧使用否定，‌使代码更易理解。‌
    // -‌预防错误‌：‌减少因否定位置不当导致的逻辑错误。‌
    'no-negated-in-lhs': 2,

    // 避免使用new Object()‌
    // -‌原因‌：‌
    // 简洁性：‌字面量语法更简洁。‌
    // 一致性：‌推荐使用字面量创建对象，‌保持代码风格一致。‌
    // 可读性：‌字面量语法更易于理解和维护。‌
    'no-new-object': 2,

    // 避免使用require的新实例‌
    // -‌原因阐述‌：‌
    // -‌保持一致性‌：‌避免require的多种用法混用，‌保持代码风格一致。‌
    // -‌简化代码‌：‌直接使用模块导入，‌无需创建require的新实例。‌
    // -‌避免混淆‌：‌防止因require新实例导致的代码理解和维护难度。‌
    'no-new-require': 2,

    // 避免使用new Symbol‌
    // -‌原因阐述‌：‌
    // -‌全局唯一性‌：‌Symbol作为ES6引入的一种新的原始数据类型，‌主要用于创建唯一的标识符。‌使用Symbol()函数（‌而非new Symbol()）‌创建的符号是全局唯一的，‌可以避免属性名的冲突。‌
    // -‌语法规范‌：‌按照JavaScript的语法规范，‌Symbol是一个原始数据类型，‌不是对象，‌因此不需要使用new关键字来创建。‌
    'no-new-symbol': 2,

    // 避免使用new创建包装对象‌
    // -‌原因阐述‌：‌
    // -‌简化代码‌：‌直接使用字面量或内置方法更简洁。‌
    // -‌性能优化‌：‌避免不必要的对象创建开销。‌
    // -‌一致性维护‌：‌推荐使用统一的代码风格。‌
    'no-new-wrappers': 2,

    // -‌核心定义‌：‌禁止直接使用对象字面量调用函数。‌
    // ‌目的解释‌：‌
    // 避免代码混淆：‌直接使用对象字面量调用函数可能使代码阅读和理解变得困难。‌
    // 促进代码清晰：‌鼓励使用更明确、‌更易读的方法调用方式。‌
    'no-obj-calls': 2,

    // -‌禁止八进制字面量‌：‌
    // -‌目的‌：‌防止使用易混淆的八进制字面量，‌提高代码清晰度。‌
    // -‌原因‌：‌八进制字面量（‌如0123）‌可能不易被识别，‌且与十进制字面量（‌如123）‌混淆，‌导致代码理解或执行错误。‌
    'no-octal': 2,

    //  避免使用八进制转义字符。‌
    // -‌原因‌：‌提高代码可读性，‌防止潜在的解析错误。‌
    'no-octal-escape': 2,

    // -‌核心定义‌：‌禁止字符串拼接来创建路径。‌
    // -‌目的解释‌：‌
    // -‌提高代码安全性‌：‌避免潜在的路径注入攻击。‌
    // -‌增强代码可维护性‌：‌使用专门的路径处理函数，‌提高代码清晰度。‌
    'no-path-concat': 2,

    // -‌目的‌：‌禁止使用__proto__属性。‌
    // -‌原因‌：‌__proto__属性是一个遗留特性，‌可能在未来的JavaScript版本中被移除，‌且其行为在不同环境下可能不一致，‌易导致兼容性问题。‌
    'no-proto': 2,

    // -‌目的‌：‌避免变量重复声明。‌
    // -‌原因‌：‌在同一作用域内重复声明变量可能导致意外的行为，‌降低代码可读性和可维护性
    'no-redeclare': 2,

    // -‌目的‌：‌规范正则表达式使用，‌避免空格问题。‌
    // -‌核心要求‌：‌
    // -‌避免空格误用‌：‌在正则表达式中，‌空格可能被解释为字面意义上的空格字符，‌导致匹配不符合预期。‌
    // -‌提高可读性‌：‌合理使用空格可以提高正则表达式的可读性，‌但应避免在字符集或量词等结构中误加空格。‌
    'no-regex-spaces': 2,

    // -‌核心要求‌：‌禁止在return语句中进行赋值操作
    'no-return-assign': [2, 'except-parens'],

    // -目的简述‌：‌防止自我赋值操作。‌
    // -‌核心要求‌：‌避免变量自我赋值，‌减少冗余代码。‌
    'no-self-assign': 2,

    // -‌目的简述‌：‌避免自我比较操作。‌
    // -‌核心要求‌：‌禁止变量与自身进行比较，‌减少冗余代码。‌
    'no-self-compare': 2,

    // -‌目的简述‌：‌禁用逗号操作符。‌
    // -‌核心要求‌：‌避免使用逗号操作符进行多个表达式求值
    'no-sequences': 2,

    // 该规则旨在防止变量名或函数名与JavaScript‌全局对象属性‌‌保留字‌冲突，‌确保代码清晰、‌减少潜在的错误。‌
    // -‌核心要求‌：‌
    // 避免使用全局对象（‌如window、‌global等）‌的属性名作为局部变量或函数名。‌
    // 避免使用JavaScript的保留字（‌如class、‌let、‌private等）‌作为变量或函数名。‌
    'no-shadow-restricted-names': 2,

    // 该规则旨在确保函数调用时，‌函数名与其后的括号之间不出现空格，‌以保持代码的一致性和可读性。‌
    // -‌核心要求‌：‌
    // -‌函数调用无空格‌：‌在函数调用时，‌函数名与紧随其后的括号之间不应有空格
    'no-spaced-func': 2,

    // 该规则旨在避免创建含有空槽位的稀疏数组，‌以提升代码的可读性和维护性。‌
    // -‌核心要求‌：‌
    // -‌禁用稀疏数组‌：‌不允许直接创建含有空槽位的数组。‌
    'no-sparse-arrays': 2,

    // 此规则旨在确保在调用super()之前，‌不访问类的this关键字。‌遵循此规则有助于维护类的正确继承和初始化顺序。‌
    // -‌核心要求‌：‌
    // 在构造函数中，‌必须先调用super()，‌才能访问this。‌
    'no-this-before-super': 2,

    // 此规则旨在防止直接抛出字面量错误，‌以增强代码的可读性和可维护性。‌
    // -‌核心要求‌：‌
    // -‌禁用字面量抛出‌：‌不允许直接抛出字符串或数字等字面量作为错误。‌
    'no-throw-literal': 2,

    // 此规则旨在避免代码行尾出现多余的空格，‌以保持代码的整洁和一致性。‌
    // -‌核心要求‌：‌
    // -‌禁止行尾空格‌：‌代码行尾不允许存在多余的空格。‌
    'no-trailing-spaces': 2,

    // -‌定义与作用‌：‌
    // -‌定义‌：‌no-undef是ESLint的一条规则，‌旨在禁用未声明的变量。‌
    // -‌作用‌：‌帮助开发者识别代码中可能存在的拼写错误或未声明的变量，‌提高代码质量。‌
    // -‌配置与使用‌：‌
    // -‌配置‌：‌在ESLint配置文件中设置"no-undef": "error"，‌以启用此规则。‌
    // -‌使用‌：‌当代码中出现未声明的变量时，‌ESLint将报错，‌提示开发者检查并修正。‌
    // -‌注意事项‌：‌
    // -‌全局变量‌：‌确保全局变量在使用前已正确声明，‌或使用ESLint的globals配置指定全局变量。‌
    // -‌模块导入‌：‌确保所有使用的模块或库已正确导入，‌避免未声明变量的错误。‌
    'no-undef': 2,

    // -‌定义‌：‌用于禁止使用未初始化的变量。‌
    // -‌作用‌：‌帮助开发者避免使用未初始化（‌即未赋值）‌的变量，‌从而减少潜在的错误和调试时间。‌
    'no-undef-init': 2,

    // 此规则旨在确保代码的可读性和一致性，‌避免意外的多行表达式。‌
    // -‌核心要求‌：‌
    // -‌避免意外换行‌：‌代码中的表达式应避免在不适当的位置换行。‌
    'no-unexpected-multiline': 2,

    // 此规则旨在提升代码质量，‌避免循环条件在循环体内未被修改的情况，‌这可能导致无限循环。‌
    // -‌核心要求‌：‌
    // -‌修改循环条件‌：‌确保循环体内的代码能够修改循环条件，‌以避免无限循环。‌
    'no-unmodified-loop-condition': 2,

    // 此规则旨在提升代码可读性，‌避免不必要的三元运算符使用。‌
    // -‌核心要求‌：‌
    // -‌简化表达式‌：‌避免使用可以简化的三元运算符
    'no-unneeded-ternary': [2, { defaultAssignment: false }],

    // 此规则用于检测代码中无法执行的代码块，‌即“死代码”。‌
    // -‌核心要求‌：‌
    // -‌消除死代码‌：‌确保代码中的每条语句都有执行的可能。‌
    'no-unreachable': 2,

    // 此规则旨在确保finally代码块中的操作不会干扰到try代码块中的正常流程或异常处理。‌
    // -‌核心要求‌：‌
    // -‌避免修改异常‌：‌确保finally块中不修改或掩盖try块中抛出的异常。‌
    // -‌资源清理‌：‌finally块应主要用于资源清理，‌如关闭文件、‌释放连接等。‌
    'no-unsafe-finally': 2,

    // -‌避免冗余‌：‌确保所有声明的变量都被使用，‌减少代码冗余。‌
    'no-unused-vars': [2, { vars: 'all', args: 'none' }],

    // -‌避免冗余调用‌：‌
    // 确保函数调用有实际作用，‌不产生冗余。‌
    // 移除无影响或重复的函数调用，‌简化代码。‌
    // -‌提升性能‌：‌
    // 减少不必要的函数调用，‌降低资源消耗。‌
    // 特别是在循环或高频调用中，‌避免无用调用。‌
    'no-useless-call': 2,

    // 确保计算键（‌computed key）‌有实际用途。‌
    'no-useless-computed-key': 2,

    // 避免无用构造函数‌
    // -‌定义与目的‌：‌
    // -‌无用构造函数‌：‌指不执行任何操作或仅包含默认操作的构造函数。‌
    // -‌目的‌：‌提升代码质量，‌避免资源浪费。‌
    // -‌识别无用构造函数‌：‌
    // 检查构造函数体内是否为空或仅包含初始化父类。‌
    // 评估构造函数是否可被默认构造函数替代。‌
    'no-useless-constructor': 2,

    // -‌避免无用转义‌：‌
    // -‌定义‌：‌指不必要的字符转义。‌
    // -‌目的‌：‌提升代码清晰度与可读性。‌
    // -‌识别无用转义‌：‌
    // 检查转义字符是否实际必要。‌
    // 评估转义是否影响代码逻辑。‌
    'no-useless-escape': 0,

    // 此规则关注CSS属性前的空格处理。‌
    // -‌核心要求‌：‌
    // 属性前不应有空格。‌
    'no-whitespace-before-property': 2,

    // -‌定义‌：‌禁止使用with语句。‌
    // -‌目的‌：‌with语句可能导致作用域混淆，‌影响代码可读性。‌
    'no-with': 2,

    // One-Var，‌即一种变量声明风格，‌主张在JavaScript中每个作用域只使用一个var关键字来声明所有变量。‌关于One-Var，‌可以从以下方面理解：‌
    // -‌核心思想‌：‌
    // 简化变量声明，‌减少var关键字使用。‌
    // -‌优势‌：‌
    // -‌代码整洁‌：‌减少代码中的var，‌使代码更简洁。‌
    // -‌便于维护‌：‌变量集中声明，‌便于查找和修改。‌
    // -‌劣势‌：‌
    // -‌可读性差‌：‌变量声明与初始化分离，‌可能影响代码可读性。‌
    // -‌调试困难‌：‌在大型代码库中，‌可能增加调试难度。‌
    'one-var': [2, { initialized: 'never' }],

    // 在编程中，‌operator-linebreak涉及如何处理代码中的运算符换行问题。‌以下是关于它的几个关键点：‌
    // -‌定义与用途‌：‌
    // -‌定义‌：‌指代码书写时，‌运算符前后的换行规则。‌
    // -‌用途‌：‌提高代码可读性，‌保持代码整洁。‌
    // -‌常见规则‌：‌
    // -‌前置换行‌：‌运算符放在新行开始，‌适用于长表达式。‌
    // -‌后置换行‌：‌运算符留在旧行末尾，‌适用于短表达式。‌
    // -‌对齐原则‌：‌换行后，‌运算符垂直对齐，‌增强可读性。‌
    'operator-linebreak': [2, 'after', { overrides: { '?': 'before', ':': 'before' } }],

    // -‌规则定义‌：‌
    // 要求或禁止在代码块（‌如if、‌else、‌for等）‌前后添加空行。‌
    // -‌应用场景‌：‌
    // -‌代码风格统一‌：‌确保团队成员遵循一致的代码风格。‌
    // -‌代码可读性提升‌：‌适当的空行可以提高代码的可读性。‌
    'padded-blocks': [2, 'never'],

    // ESLint的quotes规则用于强制使用一致的反引号、‌双引号或单引号。‌
    // -‌核心作用‌：‌
    // 保持代码风格一致，‌提升可读性。‌
    // -‌配置选项‌：‌
    // "single"：‌允许使用单引号。‌
    // "double"：‌允许使用双引号。‌
    // "backtick"：‌允许使用反引号
    quotes: [2, 'single', { avoidEscape: true, allowTemplateLiterals: true }],

    // ESLint的semi规则用‌强制使用或禁止使用分号‌。‌
    // -‌核心作用‌：‌
    // 保持代码风格一致，‌提升可读性。‌
    // -‌配置选项‌：‌
    // "always"：‌要求语句末尾总是使用分号。‌
    // "never"：‌禁止使用分号。‌
    semi: [2, 'never'],

    // ESLint的semi-spacing规则关‌分号前后的空格使用‌。‌
    // -‌核心作用‌：‌
    // 保持代码风格一致，‌提升可读性。‌
    // -‌配置选项‌：‌
    // "before"：‌要求分号前有空格。‌
    // "after"：‌要求分号后有空格。‌
    // {"before": false, "after": false}：‌分号前后均禁止空格。‌
    // {"before": true, "after": true}：‌分号前后均要求有空格。‌
    'semi-spacing': [2, { before: false, after: true }],

    // ESLint的space-before-blocks规则关‌代码块前空格的使用‌。‌
    // -‌核心作用‌：‌
    // 保持代码风格一致，‌提升可读性。‌
    // -‌配置选项‌：‌
    // "always"：‌要求代码块前总是有空格。‌
    // "never"：‌禁止代码块前有空格。‌
    // "function"：‌仅在函数声明/表达式前要求空格。‌
    // "classes"：‌仅在类声明前要求空格。‌
    'space-before-blocks': [2, 'always'],

    // ESLint的space-before-function-paren规则关‌函数括号前的空格使用‌。‌
    // -‌核心作用‌：‌
    // 保持代码风格一致，‌提升可读性。‌
    // -‌配置选项‌：‌
    // "always"：‌要求函数括号前总是有空格。‌
    // "never"：‌禁止函数括号前有空格。‌
    // {"anonymous": "always", "named": "never"}：‌匿名函数括号前要求空格，‌命名函数括号前禁止空格。‌
    // {"anonymous": "never", "named": "always"}：‌匿名函数括号前禁止空格，‌命名函数括号前要求空格。‌
    'space-before-function-paren': [0],

    // ESLint的space-in-parens规则关‌括号内的空格使用‌。‌
    // -‌核心作用‌：‌
    // 保持代码风格一致，‌提升可读性。‌
    // -‌配置选项‌：‌
    // "always"：‌要求括号内总是有空格。‌
    // "never"：‌禁止括号内有空格。‌
    // {"exceptions": ["()","{}"]}：‌允许特定括号内无空格。‌
    'space-in-parens': [2, 'never'],

    // ESLint的space-infix-ops规则关‌中缀操作符的空格使用‌。‌
    // -‌核心作用‌：‌
    // 保持代码风格一致，‌提升可读性。‌
    // -‌配置选项‌：‌
    // "always"：‌要求中缀操作符周围总是有空格。‌
    // "never"：‌禁止中缀操作符周围有空格。‌
    'space-infix-ops': 2,

    // ESLint的space-unary-ops规则关‌一元操作符的空格使用‌。‌
    // -‌核心作用‌：‌
    // 保持代码风格一致，‌提升可读性。‌
    // -‌配置选项‌：‌
    // "word"：‌要求一元操作符与其操作对象之间有一个空格。‌
    // "nonword"：‌要求一元操作符与其操作对象之间不空格，‌除非操作符后是一个注释。‌
    // {"words": true, "nonwords": false}：‌结合使用，‌对不同类型的操作符设置不同的空格要求。‌
    'space-unary-ops': [2, { words: true, nonwords: false }],

    // ESLint的spaced-comment规则关‌注释的空格使用‌。‌
    // -‌核心作用‌：‌
    // 保持代码风格一致，‌提升可读性。‌
    // -‌配置选项‌：‌
    // "always"：‌要求注释符号后总是有空格。‌
    // "never"：‌禁止注释符号后有空格。‌
    // {"exceptions": ["-", "+"]}：‌允许特定注释符号后无空格。‌
    // {"markers": ["/"]}：‌指定特定标记的注释后需要有空格。‌
    'spaced-comment': [2, 'always', { markers: ['global', 'globals', 'eslint', 'eslint-disable', '*package', '!', ','] }],

    // ESLint的template-curly-spacing规则关‌模板字符串中花括号的空格‌。‌
    // -‌核心作用‌：‌
    // 保持代码风格一致，‌提升可读性。‌
    // -‌配置选项‌：‌
    // "always"：‌要求花括号周围总是有空格。‌
    // "never"：‌禁止花括号周围有空格。‌
    'template-curly-spacing': [2, 'never'],

    // -‌核心作用‌：‌检测isNaN的不当使用。‌
    // -‌目的‌：‌促进代码清晰、‌准确，‌避免潜在错误。‌
    // ‌规则详解‌
    // -‌检测重点‌：‌
    // 识别isNaN函数应用于非数值表达式的情况。‌
    // 检查isNaN调用时是否已确保参数为数值类型。‌
    'use-isnan': 2,

    // -‌核心目的‌：‌检测typeof使用准确性。‌
    // -‌作用范围‌：‌检查代码中对typeof操作符的使用，‌确保比较操作正确。‌
    'valid-typeof': 2,

    // ESLint的wrap-iife规则关‌立即执行函数表达式（‌IIFE）‌‌的外层括号。‌
    // -‌核心作用‌：‌确保IIFE的外层括号使用一致，‌增强代码可读性。‌
    // -‌配置选项‌：‌
    // "inside"：‌要求IIFE的外层括号内只有一个语句。‌
    // "outside"：‌要求IIFE的外层括号包裹整个表达式。‌
    // "any"：‌允许IIFE的外层括号内有一个语句或包裹整个表达式。‌
    'wrap-iife': [2, 'any'],

    // -‌核心目的‌：‌规范yield*表达式间距。‌
    // -‌规则详解‌：‌
    // -‌间距要求‌：‌规定yield与*之间的空格使用。‌
    // -‌一致性‌：‌确保项目中yield*使用方式一致。‌
    // -‌配置选项‌：‌
    // -‌before‌：‌yield与*之间的空格数。‌
    // -‌after‌：‌*与表达式之间的空格数。‌
    'yield-star-spacing': [2, 'both'],

    // -‌目的与意义‌：‌
    // -‌避免逻辑混淆‌：‌yoda规则旨在防止条件语句中出现非常规的顺序，‌以增强代码可读性。‌
    // -‌配置与应用‌：‌
    // -‌默认设置‌：‌ESLint默认可能不包含yoda规则，‌需手动配置。‌
    // -‌使用场景‌：‌适用于所有JavaScript代码，‌尤其在条件判断时。‌
    yoda: [2, 'never'],

    // -‌核心目的‌：‌增强代码一致性，‌推荐使用const声明常量。‌
    // -‌规则详解‌：‌
    // -‌优先使用const‌：‌当变量不需要重新赋值时，‌应使用const而非let。‌
    // -‌避免重复赋值‌：‌使用const有助于识别代码中可能不必要的重复赋值。‌
    // -‌配置与应用‌：‌
    // -‌配置选项‌：‌可根据项目需求在ESLint配置文件中调整规则严格程度。‌
    // -‌代码审查‌：‌结合代码审查工具，‌确保团队成员遵守此规则。‌
    // -‌代码重构‌：‌在重构旧代码时，‌考虑将let替换为const以提升代码质量。‌
    // -‌实施效果‌：‌
    // -‌提升可读性‌：‌使用const使代码意图更清晰，‌易于理解。‌
    // -‌减少错误‌：‌减少因变量意外修改导致的逻辑错误。‌
    'prefer-const': 2,

    // -‌目的与意义‌：‌旨在避免在生产环境中使用debugger语句，‌确保代码质量和性能。‌
    // -‌配置与应用‌：‌
    // -‌环境区分‌：‌开发环境中可暂时忽略此规则，‌便于调试。‌
    // -‌严格实施‌：‌生产环境中应严格遵守，‌全面移除debugger。‌
    'no-debugger': process.env.NODE_ENV === 'production' ? 2 : 0,

    // -‌目的与意义‌：‌确保对象字面量的大括号间距一致性，‌增强代码可读性。‌
    // -‌配置与应用‌：‌
    // -‌默认设置‌：‌ESLint默认可能包含此规则，‌要求对象字面量的大括号与内容之间有空格。‌
    // -‌自定义配置‌：‌可在ESLint配置文件中自定义间距要求，‌如“always”或“never”。‌
    'object-curly-spacing': [2, 'always', { objectsInObjects: false }],

    // -‌规则核心‌：‌
    // 控制数组括号与内部元素间的空格。‌
    // -‌配置选项‌：‌
    // -‌"always"‌：‌要求括号与元素间始终有空格。‌
    // - 如：‌[ 1, 2, 3 ]。‌
    // -‌"never"‌：‌要求括号紧贴元素，‌不留空格。‌
    // - 如：‌[1, 2, 3]。‌
    // -‌"arraysInArrays"‌：‌仅要求数组内的数组遵循规则。‌
    // - 如：‌[1, [ 2, 3 ], 4]。‌
    // -‌"objectsInArrays"‌：‌仅要求数组内的对象遵循规则。‌
    // - 如：‌[1, { a: 2 }, 3]。‌
    'array-bracket-spacing': [2, 'never'],
  },
}
